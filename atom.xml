<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MRATREND</title>
  
  <subtitle>MRATREND BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mratrend.com/"/>
  <updated>2019-06-02T05:50:14.115Z</updated>
  <id>https://mratrend.com/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fitness record</title>
    <link href="https://mratrend.com/2019/06/02/Fitness-record/"/>
    <id>https://mratrend.com/2019/06/02/Fitness-record/</id>
    <published>2019-06-02T05:35:24.000Z</published>
    <updated>2019-06-02T05:50:14.115Z</updated>
    
    <content type="html"><![CDATA[<p>只有体态和数据。</p><table><thead><tr><th>时间</th><th>体重</th><th>肌肉</th><th>脂肪</th><th>体脂</th><th>水 分</th><th>代谢</th><th>数据源</th></tr></thead><tbody><tr><td>03/07</td><td>75</td><td>32.1</td><td>17.1</td><td>22.8</td><td>54.9</td><td>1795</td><td>魔力熊猫</td></tr><tr><td>04/09</td><td>75.4</td><td>34.1</td><td>13.9</td><td>18.4</td><td>59.2</td><td>1799</td><td>魔力熊猫</td></tr><tr><td>05/05</td><td>76.1</td><td>35</td><td>13</td><td>17</td><td>60.7</td><td>1807</td><td>魔力熊猫</td></tr><tr><td>05/31</td><td>76.3</td><td>34</td><td>15.1</td><td>19.7</td><td>57.7</td><td>1810</td><td>魔力熊猫</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;只有体态和数据。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;体重&lt;/th&gt;
&lt;th&gt;肌肉&lt;/th&gt;
&lt;th&gt;脂肪&lt;/th&gt;
&lt;th&gt;体脂&lt;/th&gt;
&lt;th&gt;水 分&lt;/th&gt;
&lt;th&gt;代谢&lt;/th&gt;
&lt;th&gt;数据源&lt;/th&gt;
&lt;/tr&gt;
      
    
    </summary>
    
      <category term="生活" scheme="https://mratrend.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="健身" scheme="https://mratrend.com/categories/%E7%94%9F%E6%B4%BB/%E5%81%A5%E8%BA%AB/"/>
    
    
      <category term="健身" scheme="https://mratrend.com/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>kolla-ansible源码分析</title>
    <link href="https://mratrend.com/2017/11/02/kolla-ansible%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://mratrend.com/2017/11/02/kolla-ansible源码分析/</id>
    <published>2017-11-02T12:36:29.000Z</published>
    <updated>2019-06-02T13:05:27.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本认识"><a href="#1-基本认识" class="headerlink" title="1. 基本认识"></a>1. 基本认识</h1><h2 id="1-1-kolla-ansible"><a href="#1-1-kolla-ansible" class="headerlink" title="1.1. kolla-ansible"></a>1.1. kolla-ansible</h2><p>kolla-ansible是从kolla项目中分离出来的一个可交付的项目。kolla-ansible负责部署容器化的openstack各个服务和基础设施组件；而kolla项目现在则单独负责镜像的构建，为kolla-ansible部署提供生产级别的openstack各服务镜像。  </p><h2 id="1-2-ansible和docker"><a href="#1-2-ansible和docker" class="headerlink" title="1.2. ansible和docker"></a>1.2. ansible和docker</h2><p>kolla-ansible利用ansible进行openstack服务的配置、编排openstack各个服务容器的部署。<br>利用容器的隔离性，达到openstack各服务容器的升级、回退，控制升级、回退的影响范围，降低openstack集群运维的复杂度。</p><h2 id="1-3-YML和Jinja2"><a href="#1-3-YML和Jinja2" class="headerlink" title="1.3. YML和Jinja2"></a>1.3. YML和Jinja2</h2><h1 id="2-源码目录"><a href="#2-源码目录" class="headerlink" title="2. 源码目录"></a>2. 源码目录</h1><h2 id="Directories"><a href="#Directories" class="headerlink" title="Directories"></a>Directories</h2><ul><li>ansible - Contains Ansible playbooks to deploy OpenStack services and infrastructure components in Docker containers.</li><li>contrib - Contains demos scenarios for Heat, Magnum and Tacker and a development environment for Vagrant</li><li>doc - Contains documentation.</li><li>etc - Contains a reference etc directory structure which requires configuration of a small number of configuration variables to achieve a working All-in-One (AIO) deployment.</li><li>specs - Contains the Kolla-Ansible communities key arguments about architectural shifts in the code base.</li><li>tests - Contains functional testing tools.</li><li>tools - Contains tools for interacting with Kolla-Ansible.</li></ul><h1 id="3-ansible"><a href="#3-ansible" class="headerlink" title="3. ansible"></a>3. ansible</h1><h2 id="3-1-ansible代码结构"><a href="#3-1-ansible代码结构" class="headerlink" title="3.1. ansible代码结构"></a>3.1. ansible代码结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">ansible</span><br><span class="line">├── action_plugins</span><br><span class="line">│   ├── merge_configs.py</span><br><span class="line">│   └── merge_yaml.py</span><br><span class="line">├── bifrost.yml</span><br><span class="line">├── certificates.yml</span><br><span class="line">├── destroy.yml</span><br><span class="line">├── group_vars</span><br><span class="line">│   └── all.yml</span><br><span class="line">├── inventory</span><br><span class="line">│   ├── all-in-one</span><br><span class="line">│   └── multinode</span><br><span class="line">├── kolla-host.yml</span><br><span class="line">├── library</span><br><span class="line">│   ├── bslurp.py</span><br><span class="line">│   ├── kolla_container_facts.py</span><br><span class="line">│   ├── kolla_docker.py</span><br><span class="line">│   ├── kolla_toolbox.py</span><br><span class="line">│   ├── merge_configs.py</span><br><span class="line">│   └── merge_yaml.py</span><br><span class="line">├── mariadb_recovery.yml</span><br><span class="line">├── post-deploy.yml</span><br><span class="line">└── roles</span><br><span class="line">    ├── aodh</span><br><span class="line">    ├── barbican</span><br><span class="line">    ├── baremetal</span><br><span class="line">    ├── bifrost</span><br><span class="line">    ├── ceilometer</span><br><span class="line">    ├── ceph</span><br><span class="line">    ├── certificates</span><br><span class="line">    ├── chrony</span><br><span class="line">    ├── cinder</span><br><span class="line">    ├── cloudkitty</span><br><span class="line">    ├── collectd</span><br><span class="line">    ├── common</span><br><span class="line">    ├── congress</span><br><span class="line">    ├── designate</span><br><span class="line">    ├── destroy</span><br><span class="line">    ├── elasticsearch</span><br><span class="line">    ├── etcd</span><br><span class="line">    ├── freezer</span><br><span class="line">    ├── glance</span><br><span class="line">    ├── gnocchi</span><br><span class="line">    ├── grafana</span><br><span class="line">    ├── haproxy</span><br><span class="line">    ├── heat</span><br><span class="line">    ├── horizon</span><br><span class="line">    ├── influxdb</span><br><span class="line">    ├── ironic</span><br><span class="line">    ├── iscsi</span><br><span class="line">    ├── karbor</span><br><span class="line">    ├── keystone</span><br><span class="line">    ├── kibana</span><br><span class="line">    ├── kuryr</span><br><span class="line">    ├── magnum</span><br><span class="line">    ├── manila</span><br><span class="line">    ├── mariadb</span><br><span class="line">    ├── memcached</span><br><span class="line">    ├── mistral</span><br><span class="line">    ├── monasca</span><br><span class="line">    ├── mongodb</span><br><span class="line">    ├── multipathd</span><br><span class="line">    ├── murano</span><br><span class="line">    ├── neutron</span><br><span class="line">    ├── nova</span><br><span class="line">    ├── nova-hyperv</span><br><span class="line">    ├── octavia</span><br><span class="line">    ├── opendaylight</span><br><span class="line">    ├── openvswitch</span><br><span class="line">    ├── ovs-dpdk</span><br><span class="line">    ├── panko</span><br><span class="line">    ├── prechecks</span><br><span class="line">    ├── qdrouterd</span><br><span class="line">    ├── rabbitmq</span><br><span class="line">    ├── rally</span><br><span class="line">    ├── redis</span><br><span class="line">    ├── sahara</span><br><span class="line">    ├── searchlight</span><br><span class="line">    ├── senlin</span><br><span class="line">    ├── skydive</span><br><span class="line">    ├── solum</span><br><span class="line">    ├── stop</span><br><span class="line">    ├── swift</span><br><span class="line">    ├── tacker</span><br><span class="line">    ├── telegraf</span><br><span class="line">    ├── tempest</span><br><span class="line">    ├── trove</span><br><span class="line">    ├── vmtp</span><br><span class="line">    ├── watcher</span><br><span class="line">    └── zun</span><br><span class="line">├── site.yml</span><br><span class="line">└── stop.yml</span><br></pre></td></tr></table></figure><h2 id="3-3-action-plugins目录"><a href="#3-3-action-plugins目录" class="headerlink" title="3.3. action_plugins目录"></a>3.3. action_plugins目录</h2><p>action_plugins目录下存放的是是kolla-ansible自定义的ansible插件<br>merge_configs.py，在playboy内通过使用merge_config来合并配置文件模板，生成openstack各服务的配置文件。</p><h2 id="3-4-group-vars-all-yml文件"><a href="#3-4-group-vars-all-yml文件" class="headerlink" title="3.4. ./group_vars/all.yml文件"></a>3.4. ./group_vars/all.yml文件</h2><p>all.yml文件作为ansible的变量文件，定义了各类配置信息。比如：配置文件路径、网卡、IP、端口号、各服务的开启等。（部分配置在globa.yml内也做了定义，global.yml具有更高优先级）   </p><p><strong>all.yml部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 配置文件路径</span><br><span class="line">node_config_directory: &quot;/etc/kolla/&#123;&#123; project &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">###################</span><br><span class="line"># Kolla options  定义vip</span><br><span class="line">###################</span><br><span class="line">kolla_internal_vip_address: &quot;&#123;&#123; kolla_internal_address &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">####################</span><br><span class="line"># Networking options 网卡、端口等的配置</span><br><span class="line">####################</span><br><span class="line">network_interface: &quot;eth0&quot;</span><br><span class="line">api_interface: &quot;&#123;&#123; network_interface &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">aodh_api_port: &quot;8042&quot;</span><br><span class="line"></span><br><span class="line">####################</span><br><span class="line"># OpenStack options openstack版本、服务开启等配置</span><br><span class="line">####################</span><br><span class="line">openstack_release: &quot;auto&quot;</span><br><span class="line"></span><br><span class="line">enable_glance: &quot;yes&quot;</span><br></pre></td></tr></table></figure></p><h2 id="3-5-inventory目录"><a href="#3-5-inventory目录" class="headerlink" title="3.5. inventory目录"></a>3.5. inventory目录</h2><p>inventory下存放的是主机清单  </p><ul><li>all-in-one用于单节点环境下，指定要部署的主机和该主机的角色  </li><li>multinode用于多节点环境，指定要部署的主机和该主机的角色  </li></ul><blockquote><p>主机清单也可作为定义变量的变量文件</p></blockquote><p><strong>multinode部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 指定节点到control组</span><br><span class="line">[control]</span><br><span class="line">node1</span><br><span class="line"></span><br><span class="line"># 指定节点到network组</span><br><span class="line">[network]</span><br><span class="line">node1</span><br><span class="line"></span><br><span class="line"># 指定节点compute组</span><br><span class="line">[compute]</span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line"></span><br><span class="line"># 指定neutron组继承network组</span><br><span class="line">[neutron:children]</span><br><span class="line">network</span><br></pre></td></tr></table></figure></p><h2 id="3-6-library目录"><a href="#3-6-library目录" class="headerlink" title="3.6. library目录"></a>3.6. library目录</h2><p>library目录下是kolla-ansible自定义的ansible模块</p><ul><li><strong>bslurp.py:</strong> 从远程节点获取文件，并分发到更多节点</li><li><strong>kolla_container_facts.py:</strong> 获取容器的facts信息</li><li><strong>kolla_docker.py:</strong> 通过调用docker-py来驱动docker，进行启动容器、删除容器等操作</li><li><strong>kolla_toolbox.py:</strong> 用于调用kolla_toolbox容器内定义的ansible模块</li></ul><h2 id="3-7-roles目录"><a href="#3-7-roles目录" class="headerlink" title="3.7. roles目录"></a>3.7. roles目录</h2><h3 id="3-7-1-ansible-role简介"><a href="#3-7-1-ansible-role简介" class="headerlink" title="3.7.1. ansible role简介"></a>3.7.1. ansible role简介</h3><p>因为在实际中，会有很多不同的业务需要很多不同的playbook文件，很难进行维护。所以ansible采用role的方式对playbook进行目录结构规范。  </p><p>在kolla-ansible内，对各个openstack服务进行部署，同样需要很多不同的playbook。<br>在roles目录内，有部署openstack各服务所需的各种playbook、定义的变量以及模板文件等。<br>与roles同级的还有site.yml文件，这是role引用的入口文件。</p><p>下面以roles目录下的neutron为例进行分析，其他服务的结构基本类似。  </p><h3 id="3-7-2-neutron目录结构"><a href="#3-7-2-neutron目录结构" class="headerlink" title="3.7.2 neutron目录结构"></a>3.7.2 neutron目录结构</h3><p>neutron目录下有5个文件夹：</p><ul><li><strong>default：</strong> 定义了部署neutron各服务的各类参数</li><li><strong>handlers：</strong> 定义了启动neutron各服务容器的操作</li><li><strong>meta：</strong> 定义了部署neutron的依赖</li><li><strong>tasks：</strong> 部署neutron的各playbook</li><li><strong>templates：</strong> neutron各服务配置文件的模板<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">neutron/</span><br><span class="line">├── defaults</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── meta</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── bootstrap_service.yml</span><br><span class="line">│   ├── bootstrap.yml</span><br><span class="line">│   ├── check.yml</span><br><span class="line">│   ├── config-neutron-fake.yml</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── deploy.yml</span><br><span class="line">│   ├── ironic-check.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   ├── precheck.yml</span><br><span class="line">│   ├── pull.yml</span><br><span class="line">│   ├── reconfigure.yml</span><br><span class="line">│   ├── register.yml</span><br><span class="line">│   └── upgrade.yml</span><br><span class="line">└── templates</span><br><span class="line">    ├── bgp_dragent.ini.j2</span><br><span class="line">    ├── dhcp_agent.ini.j2</span><br><span class="line">    ├── dnsmasq.conf.j2</span><br><span class="line">    ├── fwaas_driver.ini.j2</span><br><span class="line">    ├── l3_agent.ini.j2</span><br><span class="line">    ├── lbaas_agent.ini.j2</span><br><span class="line">    ├── metadata_agent.ini.j2</span><br><span class="line">    ├── ml2_conf.ini.j2</span><br><span class="line">    ├── neutron-bgp-dragent.json.j2</span><br><span class="line">    ├── neutron.conf.j2</span><br><span class="line">    ├── neutron-dhcp-agent.json.j2</span><br><span class="line">    ├── neutron-l3-agent.json.j2</span><br><span class="line">    ├── neutron-l3-agent-wrapper.sh.j2</span><br><span class="line">    ├── neutron-lbaas-agent.json.j2</span><br><span class="line">    ├── neutron_lbaas.conf.j2</span><br><span class="line">    ├── neutron-linuxbridge-agent.json.j2</span><br><span class="line">    ├── neutron-metadata-agent.json.j2</span><br><span class="line">    ├── neutron-openvswitch-agent.json.j2</span><br><span class="line">    ├── neutron-server.json.j2</span><br><span class="line">    ├── neutron-vpnaas-agent.json.j2</span><br><span class="line">    ├── neutron-vpnaas-agent-wrapper.sh.j2</span><br><span class="line">    ├── neutron_vpnaas.conf.j2</span><br><span class="line">    ├── nsx.ini.j2</span><br><span class="line">    └── vpnaas_agent.ini.j2</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-7-3-defaults"><a href="#3-7-3-defaults" class="headerlink" title="3.7.3. defaults"></a>3.7.3. defaults</h3><p>defaults下的main.yml，作为当前role的变量文件，定义了关于neutron及neutron各服务的相关参数  </p><p><strong>部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">project_name: &quot;neutron&quot;</span><br><span class="line"></span><br><span class="line"># 定义了neutron_server相关的参数，容器名、镜像、卷等</span><br><span class="line">neutron_services:</span><br><span class="line">  neutron-server:</span><br><span class="line">    # 定义neutron_server的容器名</span><br><span class="line">    container_name: &quot;neutron_server&quot;</span><br><span class="line">    # 定义容器使用的镜像</span><br><span class="line">    image: &quot;&#123;&#123; neutron_server_image_full &#125;&#125;&quot;</span><br><span class="line">    enabled: true</span><br><span class="line">    group: &quot;neutron-server&quot;</span><br><span class="line">    host_in_groups: &quot;&#123;&#123; inventory_hostname in groups[&apos;neutron-server&apos;] &#125;&#125;&quot;</span><br><span class="line">    # 容器和宿主机映射的卷</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;&#123;&#123; node_config_directory &#125;&#125;/neutron-server/:&#123;&#123; container_config_directory &#125;&#125;/:ro&quot;</span><br><span class="line">      - &quot;/etc/localtime:/etc/localtime:ro&quot;</span><br><span class="line">      - &quot;kolla_logs:/var/log/kolla/&quot;</span><br><span class="line">      </span><br><span class="line"># 定义neutron数据库地址等</span><br><span class="line">neutron_database_name: &quot;neutron&quot;</span><br><span class="line">neutron_database_user: &quot;neutron&quot;</span><br><span class="line">neutron_database_address: &quot;&#123;&#123; kolla_internal_fqdn &#125;&#125;:&#123;&#123; database_port &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 定义neutron_server镜像名</span><br><span class="line">neutron_server_image_full: &quot;&#123;&#123; neutron_server_image &#125;&#125;:&#123;&#123; neutron_server_tag &#125;&#125;&quot;</span><br></pre></td></tr></table></figure></p><h3 id="3-7-4-handlers"><a href="#3-7-4-handlers" class="headerlink" title="3.7.4. handlers"></a>3.7.4. handlers</h3><p>handlers下的main.yml文件，实际是创建、启动neutron各服务容器的playbook。但handlers只能在被触发的情况下才会去执行相关被触发的Task。</p><p><strong>部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 启动neutron-server容器</span><br><span class="line">---</span><br><span class="line">- name: Restart neutron-server container</span><br><span class="line">  # vars：task下定义的变量</span><br><span class="line">  vars:</span><br><span class="line">    service_name: &quot;neutron-server&quot;</span><br><span class="line">    service: &quot;&#123;&#123; neutron_services[service_name] &#125;&#125;&quot;</span><br><span class="line">    config_json: &quot;&#123;&#123; neutron_config_jsons.results|selectattr(&apos;item.key&apos;, &apos;equalto&apos;, service_name)|first &#125;&#125;&quot;</span><br><span class="line">    neutron_conf: &quot;&#123;&#123; neutron_confs.results|selectattr(&apos;item.key&apos;, &apos;equalto&apos;, service_name)|first &#125;&#125;&quot;</span><br><span class="line">    neutron_lbaas_conf: &quot;&#123;&#123; neutron_lbaas_confs.results|selectattr(&apos;item.key&apos;, &apos;equalto&apos;, service_name)|first &#125;&#125;&quot;</span><br><span class="line">    neutron_vpnaas_conf: &quot;&#123;&#123; neutron_vpnaas_confs.results|selectattr(&apos;item.key&apos;, &apos;equalto&apos;, service_name)|first &#125;&#125;&quot;</span><br><span class="line">    neutron_ml2_conf: &quot;&#123;&#123; neutron_ml2_confs.results|selectattr(&apos;item.key&apos;, &apos;equalto&apos;, service_name)|first &#125;&#125;&quot;</span><br><span class="line">    policy_json: &quot;&#123;&#123; policy_jsons.results|selectattr(&apos;item.key&apos;, &apos;equalto&apos;, service_name)|first &#125;&#125;&quot;</span><br><span class="line">    neutron_server_container: &quot;&#123;&#123; check_neutron_containers.results|selectattr(&apos;item.key&apos;, &apos;equalto&apos;, service_name)|first &#125;&#125;&quot;</span><br><span class="line">  # 调用kolla-docker模块，启动容器</span><br><span class="line">  kolla_docker:</span><br><span class="line">    action: &quot;recreate_or_restart_container&quot;</span><br><span class="line">    # docker的一些共用变量，在group/all.yml内有所定义</span><br><span class="line">    common_options: &quot;&#123;&#123; docker_common_options &#125;&#125;&quot;</span><br><span class="line">    # 指定容器名</span><br><span class="line">    name: &quot;&#123;&#123; service.container_name &#125;&#125;&quot;</span><br><span class="line">    # 指定启动容器所需镜像</span><br><span class="line">    image: &quot;&#123;&#123; service.image &#125;&#125;&quot;</span><br><span class="line">    # 容器内配置文件等和宿主机的映射关系</span><br><span class="line">    volumes: &quot;&#123;&#123; service.volumes &#125;&#125;&quot;</span><br><span class="line">    # 指定是否开启特权</span><br><span class="line">    privileged: &quot;&#123;&#123; service.privileged | default(False) &#125;&#125;&quot;</span><br><span class="line">  # when：只有当列表下的所有条件满足时，才执行该task</span><br><span class="line">  when:</span><br><span class="line">    - action != &quot;config&quot;</span><br><span class="line">    - service.enabled | bool</span><br><span class="line">    - service.host_in_groups | bool</span><br><span class="line">    - config_json | changed</span><br><span class="line">      or neutron_conf | changed</span><br><span class="line">      or neutron_lbaas_conf | changed</span><br><span class="line">      or neutron_vpnaas_conf | changed</span><br><span class="line">      or neutron_ml2_conf | changed</span><br><span class="line">      or nsx_ini | changed</span><br><span class="line">      or policy_json | changed</span><br><span class="line">      or neutron_server_container | changed</span><br></pre></td></tr></table></figure></p><h3 id="3-7-5-meta"><a href="#3-7-5-meta" class="headerlink" title="3.7.5. meta"></a>3.7.5. meta</h3><p>meta下的main.yml指定了neutron这个role的依赖，从main.yml内容可以看出实际是依赖于common这个role，也就是在执行neutron的task前，会先去common这个role下执行相关task。<br><strong>全部内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">dependencies:</span><br><span class="line">  - &#123; role: common &#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-7-6-tasks"><a href="#3-7-6-tasks" class="headerlink" title="3.7.6. tasks"></a>3.7.6. tasks</h3><h4 id="main-yml"><a href="#main-yml" class="headerlink" title="main.yml"></a>main.yml</h4><p>在tasks目录下，有很多的yml文件，其中main.yml是入口执行文件。<br>当我们执行kolla-ansible deploy时，main.yml将调用deploy.yml</p><p><strong>全部内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- include: &quot;&#123;&#123; action &#125;&#125;.yml&quot;</span><br></pre></td></tr></table></figure></p><h4 id="ironic-check-yml"><a href="#ironic-check-yml" class="headerlink" title="ironic-check.yml"></a>ironic-check.yml</h4><p>检查是否满足ironic开启时，neutron_plugin_agent配置为openvswitch，不满足则报错</p><p><strong>全部内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- fail: msg=&quot;neutron_plugin_agent must use openvswitch with Ironic&quot;</span><br><span class="line">  when:</span><br><span class="line">    - enable_ironic | bool</span><br><span class="line">    - neutron_plugin_agent != &quot;openvswitch&quot;</span><br></pre></td></tr></table></figure></p><h4 id="register-yml"><a href="#register-yml" class="headerlink" title="register.yml"></a>register.yml</h4><p>register.yml内进行了neutron的service和endpoint创建、project，user，和role创建。  </p><p>在这里面调用了自定义的kolla_toolbox模块，该模块实际是去kolla_toolbox容器内调用自定义的kolla_keystone_service模块，并把module_args下的变量传递进去。</p><p><strong>部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Creating the Neutron service and endpoint</span><br><span class="line">  调用kolla_toolbox模块</span><br><span class="line">  kolla_toolbox:</span><br><span class="line">    # kolla_keystone_service模块在kolla_toolbox容器内的/usr/share/ansible/目录下</span><br><span class="line">    module_name: &quot;kolla_keystone_service&quot;</span><br><span class="line">    # 定义创建service和endpoint所需的变量和值，供kolla_keystone_service模块执行</span><br><span class="line">    module_args:</span><br><span class="line">      service_name: &quot;neutron&quot;</span><br><span class="line">      service_type: &quot;network&quot;</span><br><span class="line">      description: &quot;Openstack Networking&quot;</span><br><span class="line">      endpoint_region: &quot;&#123;&#123; openstack_region_name &#125;&#125;&quot;</span><br><span class="line">      url: &quot;&#123;&#123; item.url &#125;&#125;&quot;</span><br><span class="line">      interface: &quot;&#123;&#123; item.interface &#125;&#125;&quot;</span><br><span class="line">      region_name: &quot;&#123;&#123; openstack_region_name &#125;&#125;&quot;</span><br><span class="line">      auth: &quot;&#123;&#123; &apos;&#123;&#123; openstack_neutron_auth &#125;&#125;&apos; &#125;&#125;&quot;</span><br><span class="line">      endpoint_type: &quot;&#123;&#123; openstack_interface &#125;&#125;&quot;</span><br><span class="line">    module_extra_vars:</span><br><span class="line">      openstack_neutron_auth: &quot;&#123;&#123; openstack_neutron_auth &#125;&#125;&quot;</span><br><span class="line">  # run_once：任选单个节点执行一次，不会在所有节点执行</span><br><span class="line">  run_once: True</span><br><span class="line">  # with_items: 对列表进行循环操作</span><br><span class="line">  with_items:</span><br><span class="line">    - &#123;&apos;interface&apos;: &apos;admin&apos;, &apos;url&apos;: &apos;&#123;&#123; neutron_admin_endpoint &#125;&#125;&apos;&#125;</span><br><span class="line">    - &#123;&apos;interface&apos;: &apos;internal&apos;, &apos;url&apos;: &apos;&#123;&#123; neutron_internal_endpoint &#125;&#125;&apos;&#125;</span><br><span class="line">    - &#123;&apos;interface&apos;: &apos;public&apos;, &apos;url&apos;: &apos;&#123;&#123; neutron_public_endpoint &#125;&#125;&apos;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="config.yml"></a>config.yml</h4><p>config.yml是通过模板为neutron的各个服务生成配置文件  </p><p><strong>部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#确认配置文件的路径存在，不存在则创建</span><br><span class="line">- name: Ensuring config directories exist</span><br><span class="line">  file:</span><br><span class="line">    path: &quot;&#123;&#123; node_config_directory &#125;&#125;/&#123;&#123; item.key &#125;&#125;&quot;</span><br><span class="line">    state: &quot;directory&quot;</span><br><span class="line">    recurse: yes</span><br><span class="line">  when:</span><br><span class="line">    - item.value.enabled | bool</span><br><span class="line">    - item.value.host_in_groups | bool</span><br><span class="line">  with_dict: &quot;&#123;&#123; neutron_services &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 为需要neutron.conf配置文件的服务生成neutron.conf配置文件  </span><br><span class="line">- name: Copying over neutron.conf</span><br><span class="line">  vars:</span><br><span class="line">    service_name: &quot;&#123;&#123; item.key &#125;&#125;&quot;</span><br><span class="line">    # 定义需要neutron.conf配置文件的服务</span><br><span class="line">    services_need_neutron_conf:</span><br><span class="line">      - &quot;neutron-dhcp-agent&quot;</span><br><span class="line">      - &quot;neutron-l3-agent&quot;</span><br><span class="line">      - &quot;neutron-linuxbridge-agent&quot;</span><br><span class="line">      - &quot;neutron-metadata-agent&quot;</span><br><span class="line">      - &quot;neutron-openvswitch-agent&quot;</span><br><span class="line">      - &quot;neutron-server&quot;</span><br><span class="line">      - &quot;neutron-lbaas-agent&quot;</span><br><span class="line">      - &quot;neutron-vpnaas-agent&quot;</span><br><span class="line">      - &quot;neutron-bgp-dragent&quot;</span><br><span class="line">  # 调用自定义的merge_configs模块</span><br><span class="line">  # merge_configs模块将合并sources下列表的所有模板和文件，生成neutron.conf</span><br><span class="line">  merge_configs:</span><br><span class="line">    sources:</span><br><span class="line">      # sources下列表的文件内，配置项重复时，下方的将覆盖上方的</span><br><span class="line">      - &quot;&#123;&#123; role_path &#125;&#125;/templates/neutron.conf.j2&quot;</span><br><span class="line">      - &quot;&#123;&#123; node_custom_config &#125;&#125;/global.conf&quot;</span><br><span class="line">      - &quot;&#123;&#123; node_custom_config &#125;&#125;/database.conf&quot;</span><br><span class="line">      - &quot;&#123;&#123; node_custom_config &#125;&#125;/messaging.conf&quot;</span><br><span class="line">      - &quot;&#123;&#123; node_custom_config &#125;&#125;/neutron.conf&quot;</span><br><span class="line">      - &quot;&#123;&#123; node_custom_config &#125;&#125;/neutron/&#123;&#123; item.key &#125;&#125;.conf&quot;</span><br><span class="line">      - &quot;&#123;&#123; node_custom_config &#125;&#125;/neutron/&#123;&#123; inventory_hostname &#125;&#125;/neutron.conf&quot;</span><br><span class="line">    dest: &quot;&#123;&#123; node_config_directory &#125;&#125;/&#123;&#123; item.key &#125;&#125;/neutron.conf&quot;</span><br><span class="line">  register: neutron_confs</span><br><span class="line">  when:</span><br><span class="line">    - item.value.enabled | bool</span><br><span class="line">    - item.value.host_in_groups | bool</span><br><span class="line">    - item.key in services_need_neutron_conf</span><br><span class="line">  # 对neutron_services下的各服务进行循环</span><br><span class="line">  with_dict: &quot;&#123;&#123; neutron_services &#125;&#125;&quot;</span><br><span class="line">  # 触发执行handlers下的Restart &#123;&#123; item.key &#125;&#125; container的task</span><br><span class="line">  # 被触发的task将在所有task执行完成后执行</span><br><span class="line">  notify:</span><br><span class="line">    - &quot;Restart &#123;&#123; item.key &#125;&#125; container&quot;</span><br></pre></td></tr></table></figure></p><h4 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h4><p>bootstrap.yml是为neutron创建数据库及数据库用户等</p><p><strong>部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 创建neutron的数据库</span><br><span class="line">- name: Creating Neutron database</span><br><span class="line">  # 调用kolla_toolbox模块</span><br><span class="line">  kolla_toolbox:</span><br><span class="line">    module_name: mysql_db</span><br><span class="line">    module_args:</span><br><span class="line">      login_host: &quot;&#123;&#123; database_address &#125;&#125;&quot;</span><br><span class="line">      login_port: &quot;&#123;&#123; database_port &#125;&#125;&quot;</span><br><span class="line">      login_user: &quot;&#123;&#123; database_user &#125;&#125;&quot;</span><br><span class="line">      login_password: &quot;&#123;&#123; database_password &#125;&#125;&quot;</span><br><span class="line">      name: &quot;&#123;&#123; neutron_database_name &#125;&#125;&quot;</span><br><span class="line">  # 将执行结果暂存到database</span><br><span class="line">  register: database</span><br><span class="line">  run_once: True</span><br><span class="line">  # 指定在neutron-server主机组的第一个主机上执行该task</span><br><span class="line">  delegate_to: &quot;&#123;&#123; groups[&apos;neutron-server&apos;][0] &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 当上方暂存的database有改变值时，将会去执行bootstrap_service.yml</span><br><span class="line">- include: bootstrap_service.yml</span><br><span class="line">  when: database.changed</span><br></pre></td></tr></table></figure></p><h4 id="bootstrap-service-yml"><a href="#bootstrap-service-yml" class="headerlink" title="bootstrap_service.yml"></a>bootstrap_service.yml</h4><p>bootstrap_service.yml将会启动bootstrap引导容器，用于解决neutron服务所需的依赖配置，在完成后，这些引导容器将被自动删除</p><p><strong>部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 启动bootstrap_neutron容器</span><br><span class="line">- name: Running Neutron bootstrap container</span><br><span class="line">  vars:</span><br><span class="line">    neutron_server: &quot;&#123;&#123; neutron_services[&apos;neutron-server&apos;] &#125;&#125;&quot;</span><br><span class="line">  kolla_docker:</span><br><span class="line">    action: &quot;start_container&quot;</span><br><span class="line">    common_options: &quot;&#123;&#123; docker_common_options &#125;&#125;&quot;</span><br><span class="line">    detach: False</span><br><span class="line">    environment:</span><br><span class="line">      KOLLA_BOOTSTRAP:</span><br><span class="line">      KOLLA_CONFIG_STRATEGY: &quot;&#123;&#123; config_strategy &#125;&#125;&quot;</span><br><span class="line">    image: &quot;&#123;&#123; neutron_server.image &#125;&#125;&quot;</span><br><span class="line">    labels:</span><br><span class="line">      BOOTSTRAP:</span><br><span class="line">    name: &quot;bootstrap_neutron&quot;</span><br><span class="line">    restart_policy: &quot;never&quot;</span><br><span class="line">    volumes: &quot;&#123;&#123; neutron_server.volumes &#125;&#125;&quot;</span><br><span class="line">  run_once: True</span><br><span class="line">  delegate_to: &quot;&#123;&#123; groups[neutron_server.group][0] &#125;&#125;&quot;</span><br></pre></td></tr></table></figure></p><h3 id="3-7-7-templates"><a href="#3-7-7-templates" class="headerlink" title="3.7.7. templates"></a>3.7.7. templates</h3><p>templates目录下存放着很多j2格式的文件，他们都是neutron各服务的配置文件模板，这些模板将被config.yml根据需要生成为各服务的配置文件。<br>这里举neutron.conf.j2和neutron-server.json.j2为例进行分析</p><h4 id="neutron-conf-j2"><a href="#neutron-conf-j2" class="headerlink" title="neutron.conf.j2"></a>neutron.conf.j2</h4><p><strong>部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line"># 直接生成配置项</span><br><span class="line">log_dir = /var/log/kolla/neutron</span><br><span class="line"></span><br><span class="line"># 将会读取变量文件中api_interface_address和neutron_server_port的值，生成配置项</span><br><span class="line">bind_host = &#123;&#123; api_interface_address &#125;&#125;</span><br><span class="line">bind_port = &#123;&#123; neutron_server_port &#125;&#125;</span><br><span class="line"></span><br><span class="line"># 将根据if条件判断表达式，符合的表达式将生成对应的配置项</span><br><span class="line">&#123;% if neutron_plugin_agent == &apos;vmware_nsxv&apos; %&#125;</span><br><span class="line">core_plugin = vmware_nsx.plugin.NsxVPlugin</span><br><span class="line">&#123;% elif neutron_plugin_agent == &apos;vmware_dvs&apos; %&#125;</span><br><span class="line">core_plugin = vmware_nsx.plugin.NsxDvsPlugin</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">core_plugin = ml2</span><br><span class="line">service_plugins = &#123;&#123; neutron_service_plugins|map(attribute=&apos;name&apos;)|join(&apos;,&apos;) &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="neutron-server-json-j2"><a href="#neutron-server-json-j2" class="headerlink" title="neutron-server.json.j2"></a>neutron-server.json.j2</h4><p>config.yml将把neutron-server.json.j2生成为config.json，存放在/etc/kolla/neutron-server/目录下，同时该目录下还有neutron.conf等其他neutron-server的配置文件。  </p><p>在启动容器时/etc/kolla/neutron-server/会被映射到neutron_server容器的/var/lib/kolla/config_files/目录下。  </p><p>此时生成的config.json的作用就是提供/var/lib/kolla/config_files/目录下neutron-server服务各配置文件与真正配置文件目录：/etc/neutron/ 的链接关系</p><p><strong>部分内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;command&quot;: &quot;neutron-server --config-file /etc/neutron/neutron.conf &#123;% if neutron_plugin_agent in [&apos;openvswitch&apos;, &apos;linuxbridge&apos;, &apos;opendaylight&apos;] %&#125; --config-file /etc/neutron/plugins/ml2/ml2_conf.ini --config-file /etc/neutron/neutron_lbaas.conf --config-file /etc/neutron/neutron_vpnaas.conf &#123;% elif neutron_plugin_agent in [&apos;vmware_nsxv&apos;, &apos;vmware_dvs&apos;] %&#125; --config-file /etc/neutron/plugins/vmware/nsx.ini &#123;% endif %&#125; --config-file /etc/neutron/fwaas_driver.ini&quot;,</span><br><span class="line">    &quot;config_files&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            # 提供/var/lib/kolla/config_files/neutron.conf和/etc/neutron/neutron.conf的链接</span><br><span class="line">            &quot;source&quot;: &quot;&#123;&#123; container_config_directory &#125;&#125;/neutron.conf&quot;,</span><br><span class="line">            &quot;dest&quot;: &quot;/etc/neutron/neutron.conf&quot;,</span><br><span class="line">            &quot;owner&quot;: &quot;neutron&quot;,</span><br><span class="line">            &quot;perm&quot;: &quot;0600&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-基本认识&quot;&gt;&lt;a href=&quot;#1-基本认识&quot; class=&quot;headerlink&quot; title=&quot;1. 基本认识&quot;&gt;&lt;/a&gt;1. 基本认识&lt;/h1&gt;&lt;h2 id=&quot;1-1-kolla-ansible&quot;&gt;&lt;a href=&quot;#1-1-kolla-ansible&quot;
      
    
    </summary>
    
      <category term="openstack" scheme="https://mratrend.com/categories/openstack/"/>
    
      <category term="kolla-ansible" scheme="https://mratrend.com/categories/openstack/kolla-ansible/"/>
    
    
      <category term="openstack" scheme="https://mratrend.com/tags/openstack/"/>
    
      <category term="kolla-ansible" scheme="https://mratrend.com/tags/kolla-ansible/"/>
    
      <category term="ansible" scheme="https://mratrend.com/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>kolla-ansible部署Openstack</title>
    <link href="https://mratrend.com/2017/03/27/kolla-ansible%E9%83%A8%E7%BD%B2Openstack/"/>
    <id>https://mratrend.com/2017/03/27/kolla-ansible部署Openstack/</id>
    <published>2017-03-27T15:32:08.000Z</published>
    <updated>2019-06-02T16:02:30.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-文档概述"><a href="#1-文档概述" class="headerlink" title="1. 文档概述"></a>1. 文档概述</h1><p>kolla-ansible是在容器中部署OpenStack服务和基础设施组件的一个项目。<br>本文档将搭建一个kolla-ansible环境，并利用kolla-ansible进行openstack容器化部署。</p><h2 id="1-1-使用人员"><a href="#1-1-使用人员" class="headerlink" title="1.1. 使用人员"></a>1.1. 使用人员</h2><p>本文档适用但不限于以下人员：  </p><ul><li>kolla-ansible部署人员</li><li>openstack开发人员</li><li>云计算初学者</li></ul><h2 id="1-2-环境规划"><a href="#1-2-环境规划" class="headerlink" title="1.2. 环境规划"></a>1.2. 环境规划</h2><p><strong>总体环境：</strong><br>此次部署，采用2个虚拟机节点；每个节点需要2张网卡（不同节点网卡名应该相同）。<br>系统要求：Centos 7.3<br>Kolla-ansible版本：5.0.0<br>kolla镜像版本：5.0.0<br>Openstack版本：Pike</p><p><strong>节点1环境：</strong><br>主机名：node1<br>配置：4CPU 8G<br>角色：kolla-ansible控制节点 + 控制 + 网络 + 计算 + 存储<br>ens32（网卡1）：172.24.26.31，管理+内部网络<br>ens33（网卡2）：不配IP， 外部网络  </p><p><strong>节点2环境：</strong><br>主机名：node2<br>配置：4CPU 8G<br>角色：计算<br>ens32（网卡1）：172.24.26.32， 管理+内部网络<br>ens33（网卡2）：不配IP， 外部网络</p><h2 id="1-3-约定"><a href="#1-3-约定" class="headerlink" title="1.3. 约定"></a>1.3. 约定</h2><p>为统一下文可能出现歧义的名词，做如下约定：<br>openstack节点 -&gt; 即指本环境node1、node2节点；<br>kolla-ansible控制节点 -&gt; 即指本环境node1；</p><h1 id="2-系统安装"><a href="#2-系统安装" class="headerlink" title="2. 系统安装"></a>2. 系统安装</h1><h1 id="3-系统环境设置"><a href="#3-系统环境设置" class="headerlink" title="3. 系统环境设置"></a>3. 系统环境设置</h1><h2 id="3-1-关闭selinux"><a href="#3-1-关闭selinux" class="headerlink" title="3.1. 关闭selinux"></a>3.1. 关闭selinux</h2><p>在openstack节点执行<br>临时关闭selinux：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure></p><p>编辑 /etc/selinux/config：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></p><blockquote><p>配置好后最好重启主机，后面部署有可能出现问题</p></blockquote><h2 id="3-2-关闭防火墙"><a href="#3-2-关闭防火墙" class="headerlink" title="3.2. 关闭防火墙"></a>3.2. 关闭防火墙</h2><p>在openstack节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></p><h2 id="3-3-设置相应的主机名"><a href="#3-3-设置相应的主机名" class="headerlink" title="3.3. 设置相应的主机名"></a>3.3. 设置相应的主机名</h2><p>在node1执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl --static set-hostname node1</span><br></pre></td></tr></table></figure></p><p>在node2执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl --static set-hostname node2</span><br></pre></td></tr></table></figure></p><h2 id="3-4-修改-etc-hosts文件"><a href="#3-4-修改-etc-hosts文件" class="headerlink" title="3.4. 修改/etc/hosts文件"></a>3.4. 修改/etc/hosts文件</h2><p>在openstack节点执行  </p><p>编辑 /etc/hosts：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">172.24.26.31 node1</span><br><span class="line">172.24.26.32 node2</span><br></pre></td></tr></table></figure></p><h2 id="3-5-修改时区"><a href="#3-5-修改时区" class="headerlink" title="3.5. 修改时区"></a>3.5. 修改时区</h2><p>在openstack节点执行   </p><p>同步系统时间到硬件时钟:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock -w</span><br></pre></td></tr></table></figure></p><p>修改时区：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></p><h2 id="3-6-部署NTP"><a href="#3-6-部署NTP" class="headerlink" title="3.6. 部署NTP"></a>3.6. 部署NTP</h2><p><strong>1.安装NTP</strong><br>在openstack节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install ntp -y</span><br><span class="line">systemctl enable ntpd.service</span><br><span class="line">systemctl start ntpd.service</span><br></pre></td></tr></table></figure></p><p><strong>2.配置NTP server</strong><br>选择node1作为NTP server，在node1上执行</p><p>配置<code>/etc/ntp.conf</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#插入本行允许本网段内的其他机器同步时间</span><br><span class="line">#restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line">restrict 172.24.26.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line">#注释掉centos的时间服务器</span><br><span class="line"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="line">#server 0.centos.pool.ntp.org iburst</span><br><span class="line">#server 1.centos.pool.ntp.org iburst</span><br><span class="line">#server 2.centos.pool.ntp.org iburst</span><br><span class="line">#server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">#插入这2行，使用本地时间作为时间服务</span><br><span class="line">server  127.127.1.0</span><br><span class="line">fudge   127.127.1.0 stratum 10</span><br><span class="line">```  </span><br><span class="line">重启NTP服务：  </span><br><span class="line">```  </span><br><span class="line">systemctl restart ntpd.service</span><br></pre></td></tr></table></figure></p><p>查看上层NTP服务器的状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ntpq -p</span><br><span class="line"></span><br><span class="line">     remote           refid      st t when poll reach   delay   offset  jitter</span><br><span class="line">==============================================================================</span><br><span class="line">*LOCAL(0)        .LOCL.          10 l   56   64  377    0.000    0.000   0.000</span><br></pre></td></tr></table></figure></p><blockquote><p>remote：NTP服务器的IP或者主机名，左边符号如果是“*”代表目前正在作用的NTP服务器  </p></blockquote><p>查看时间同步状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ntpstat</span><br><span class="line"></span><br><span class="line">synchronised to local net at stratum 11</span><br><span class="line">   time correct to within 11 ms</span><br><span class="line">   polling server every 64 s</span><br></pre></td></tr></table></figure></p><blockquote><p>结果可以看到同步时间来自本地  </p></blockquote><p><strong>3.配置NTP slave</strong><br>node2即作为客户节点，在node2上执行  </p><p>手动同步node1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate 172.24.26.31</span><br></pre></td></tr></table></figure></p><p>配置/etc/ntp.conf文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#注释掉centos的时间服务器</span><br><span class="line"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="line">#server 0.centos.pool.ntp.org iburst</span><br><span class="line">#server 1.centos.pool.ntp.org iburst</span><br><span class="line">#server 2.centos.pool.ntp.org iburst</span><br><span class="line">#server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">#插入本行，允许时间服务器修改时间</span><br><span class="line">restrict 172.24.26.31</span><br><span class="line"></span><br><span class="line">#插入本行，指定时间服务器</span><br><span class="line">server 172.21.128.44</span><br><span class="line">```  </span><br><span class="line">重启NTP服务：  </span><br><span class="line">```  </span><br><span class="line">systemctl restart ntpd.service</span><br></pre></td></tr></table></figure></p><p>查看上层NTP服务器的状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ntpq –p</span><br><span class="line"></span><br><span class="line">     remote           refid      st t when poll reach   delay   offset  jitter</span><br><span class="line">==============================================================================</span><br><span class="line">*172.24.26.31   LOCAL(0)        11 u   19   64  377    0.209   -0.023   0.033</span><br></pre></td></tr></table></figure></p><blockquote><p>结果显示可以同步node1节点的时间  </p></blockquote><p>查看时间同步状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ntpstat</span><br><span class="line"></span><br><span class="line">synchronised to NTP server (172.24.26.31) at stratum 12</span><br><span class="line">   time correct to within 451 ms</span><br><span class="line">   polling server every 64 s</span><br></pre></td></tr></table></figure></p><blockquote><p>执行命令如果出现下面的结果，是因为还未与NTP服务器连接上，这个过程需要数分钟。我们可以过会再执行这个命令查看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ntpstat</span><br><span class="line"></span><br><span class="line">unsynchronised</span><br><span class="line">  time server re-starting</span><br><span class="line">   polling server every 8 s</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="3-7-ssh免密设置"><a href="#3-7-ssh免密设置" class="headerlink" title="3.7. ssh免密设置"></a>3.7. ssh免密设置</h2><p>在kolla-ansible控制节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P &apos;&apos; -f /root/.ssh/id_rsa</span><br><span class="line">ssh-copy-id -o StrictHostKeyChecking=no node1</span><br><span class="line">ssh-copy-id -o StrictHostKeyChecking=no node2</span><br></pre></td></tr></table></figure></p><h2 id="3-8-安装epel源和依赖组件"><a href="#3-8-安装epel源和依赖组件" class="headerlink" title="3.8. 安装epel源和依赖组件"></a>3.8. 安装epel源和依赖组件</h2><p>在openstack节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install -y python-pip python-devel libffi-devel gcc openssl-devel git</span><br><span class="line">pip install -U pip</span><br></pre></td></tr></table></figure></p><h1 id="4-kolla-ansible环境设置"><a href="#4-kolla-ansible环境设置" class="headerlink" title="4. kolla-ansible环境设置"></a>4. kolla-ansible环境设置</h1><h2 id="4-1-Docker安装和配置"><a href="#4-1-Docker安装和配置" class="headerlink" title="4.1. Docker安装和配置"></a>4.1. Docker安装和配置</h2><p>在openstack节点执行：</p><p><strong>1.Docker安装</strong><br>添加docker的yum源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/yum.repos.d/docker.repo &lt;&lt; &apos;EOF&apos;</span><br><span class="line">[dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>因kolla-ansible不支持高版本docker，因此指定安装版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-engine-1.12.6 -y</span><br></pre></td></tr></table></figure></p><p>安装docker-py：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker</span><br></pre></td></tr></table></figure></p><blockquote><p>Ocata版本docker-py安装：pip install docker-py  </p></blockquote><p><strong>2.修改docker配置</strong><br>修改docker服务参数，启用MountFlags=shared：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/docker.service.d  </span><br><span class="line"></span><br><span class="line">tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt;&apos;EOF&apos;</span><br><span class="line">[Service]</span><br><span class="line">MountFlags=shared</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3.启动docker服务</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></p><h2 id="4-2-Docker镜像仓库"><a href="#4-2-Docker镜像仓库" class="headerlink" title="4.2. Docker镜像仓库"></a>4.2. Docker镜像仓库</h2><p><strong>1.创建镜像仓库</strong><br>选择node1作为openstack集群的镜像仓库，在node1上执行  </p><p>启动本地仓库容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /opt/registry:/var/lib/registry -p 4000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：默认docker的registry是使用5000端口，与OpenStack有端口冲突，所以kolla使用的是4000端口</p></blockquote><p>下载kolla镜像包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://tarballs.openstack.org/kolla/images/centos-source-registry-pike.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压到镜像仓库的镜像存放目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf centos-source-registry-ocata.tar.gz -C /opt/registry/</span><br></pre></td></tr></table></figure></p><p><strong>2.设置访问镜像仓库权限</strong><br>在openstack节点执行  </p><p>编辑/usr/lib/systemd/system/docker.service：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/dockerd  --insecure-registry 172.24.26.31:4000</span><br></pre></td></tr></table></figure></p><p>重启docker：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><h2 id="4-3-安装ansible及kolla-ansible"><a href="#4-3-安装ansible及kolla-ansible" class="headerlink" title="4.3. 安装ansible及kolla-ansible"></a>4.3. 安装ansible及kolla-ansible</h2><p>在kolla-ansible控制节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -U ansible</span><br><span class="line">pip install kolla-ansible==5.0.0</span><br></pre></td></tr></table></figure></p><h2 id="4-4-kolla-ansible配置"><a href="#4-4-kolla-ansible配置" class="headerlink" title="4.4. kolla-ansible配置"></a>4.4. kolla-ansible配置</h2><p><strong>1.配置全局配置文件</strong><br>在kolla-ansible控制节点执行  </p><p>拷贝全局配置文件到/etc/kolla/：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/kolla/</span><br><span class="line">cp -r /usr/share/kolla-ansible/etc_examples/kolla /etc/kolla/</span><br></pre></td></tr></table></figure></p><p>编辑/etc/kolla/globals.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker_registry: “172.24.26.31:4000”</span><br><span class="line">docker_namespace: “lokolla” </span><br><span class="line">network_interface: “ens32”   </span><br><span class="line">neutron_external_interface: “ens33”   </span><br><span class="line">kolla_install_type: “source”</span><br><span class="line">openstack_release: “5.0.0”</span><br><span class="line">kolla_internal_vip_address: “172.24.26.111” </span><br><span class="line">keepalived_virtual_router_id: &quot;11&quot;</span><br><span class="line">enable_cinder: &quot;yes&quot;</span><br><span class="line">enable_heat: &quot;no&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>kolla_internal_vip_address，这个ip是一个未被占用的ip地址，给haproxy使用作为虚拟IP使用；  keepalived_virtual_router_id，取消该行的注释，并将默认值51改为0-255内任意未被占用的值。</p></blockquote><p><strong>2.配置待部署的主机清单</strong><br>在kolla-ansible控制节点执行  </p><p>将清单文件拷贝至root目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/kolla-ansible/ansible/inventory/* /root/</span><br></pre></td></tr></table></figure></p><p>node1作为控制 + 网络 + 计算 + 存储节点<br>node2作为计算节点<br>编辑/root/multinode如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[control]</span><br><span class="line">node1</span><br><span class="line"></span><br><span class="line">[network]</span><br><span class="line">node1</span><br><span class="line"></span><br><span class="line">[compute]</span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line"></span><br><span class="line">[monitoring]</span><br><span class="line">node1</span><br><span class="line"></span><br><span class="line">[storage]</span><br><span class="line">node1</span><br></pre></td></tr></table></figure></p><blockquote><p>删除control01、network02、compute01、monitoring01、storage01这些带数字的作为示例的节点</p></blockquote><p><strong>3.生成openstack各服务所需密码</strong><br>在kolla-ansible控制节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-genpwd</span><br></pre></td></tr></table></figure></p><p><strong>4.查看是否需要虚拟化配置</strong><br>在计算节点（本环境下即为openstack节点）执行  </p><p>查看cpu是否开启虚拟化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ egrep -c ‘(vmx|svm)’ /proc/cpuinfo</span><br><span class="line">4</span><br></pre></td></tr></table></figure></p><p>如果数字大于0，则忽略。<br>如果数字为0，则不支持虚拟化，就不能使用kvm，只能用qemu，需要操作下面两步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/kolla/config/nova</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/kolla/config/nova/nova-compute.conf</span><br><span class="line">[libvirt]</span><br><span class="line">virt_type = qemu</span><br><span class="line">cpu_mode = none</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><h1 id="5-kolla-ansible部署openstack"><a href="#5-kolla-ansible部署openstack" class="headerlink" title="5. kolla-ansible部署openstack"></a>5. kolla-ansible部署openstack</h1><p><strong>1.部署前检查</strong><br>在kolla-ansible控制节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible prechecks -i /root/multinode</span><br></pre></td></tr></table></figure></p><p>检查完成failed应该等于0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PLAY RECAP *********************************************************************</span><br><span class="line">node1                    : ok=134  changed=0    unreachable=0    failed=0</span><br><span class="line">node2                    : ok=133  changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p><p><strong>2.开始部署</strong><br>在kolla-ansible控制节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible deploy -i /root/multinode</span><br></pre></td></tr></table></figure></p><p>部署成功failed应该等于0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PLAY RECAP *********************************************************************</span><br><span class="line">kolla1                    : ok=354  changed=153  unreachable=0    failed=0</span><br><span class="line">kolla2                    : ok=288  changed=115  unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p><h1 id="6-部署完成"><a href="#6-部署完成" class="headerlink" title="6. 部署完成"></a>6. 部署完成</h1><p><strong>1.生成openstack环境变量</strong><br>在kolla-ansible控制节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kolla-ansible post-deploy</span><br></pre></td></tr></table></figure></p><blockquote><p>生成的路径为/etc/kolla/admin-openrc.sh</p></blockquote><p><strong>2.安装openstack client</strong><br>在openstack节点执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U python-openstackclient</span><br></pre></td></tr></table></figure></p><p><strong>3.加载环境变量</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. /etc/kolla/admin-openrc.sh</span><br></pre></td></tr></table></figure></p><hr><p>上面已完成kolla-ansible部署容器化的openstack。  </p><p>打开dashboard，地址就是haproxy的VIP地址172.24.26.111；<br>帐号admin，密码为/etc/kolla/admin-openrc.sh内OS_PASSWORD对应的密码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-文档概述&quot;&gt;&lt;a href=&quot;#1-文档概述&quot; class=&quot;headerlink&quot; title=&quot;1. 文档概述&quot;&gt;&lt;/a&gt;1. 文档概述&lt;/h1&gt;&lt;p&gt;kolla-ansible是在容器中部署OpenStack服务和基础设施组件的一个项目。&lt;br&gt;本文档将
      
    
    </summary>
    
      <category term="openstack" scheme="https://mratrend.com/categories/openstack/"/>
    
      <category term="kolla-ansible" scheme="https://mratrend.com/categories/openstack/kolla-ansible/"/>
    
    
      <category term="openstack" scheme="https://mratrend.com/tags/openstack/"/>
    
      <category term="kolla-ansible" scheme="https://mratrend.com/tags/kolla-ansible/"/>
    
      <category term="ansible" scheme="https://mratrend.com/tags/ansible/"/>
    
  </entry>
  
</feed>
